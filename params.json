{"name":"Http-replayer","tagline":"Consume a redis database to replay http requests.","body":"# http-replayer\r\n\r\nnode module which consumes a redis database\r\nto replay http requests.\r\n\r\n\r\n## install\r\n\r\n    npm i maboiteaspam/http-replayer -g\r\n\r\n\r\n## usage\r\n\r\n    redis-server\r\n    http-replayer [opts]\r\n\r\n##### --rport=`6379`\r\nRedis port\r\n\r\n##### --rhost=`0.0.0.0`\r\nRedis host\r\n\r\n##### --ropts=``\r\nRedis options as a stringified json object\r\n\r\n##### --port=`8081`\r\nReplay target http server port\r\n\r\n##### --host=`127.0.0.1`\r\nReplay target http server host\r\n\r\n\r\n## more info\r\n\r\n##### data pulling\r\n\r\nThe module use a main loop `updateCurrentJobs`.\r\n\r\nThis loop pull the whole keyspace at first,\r\nit come from `blockKeys` redis `set`.\r\n\r\nLater it won't fetch `blockKeys` until all known `keyspace`\r\nare completed.\r\n\r\nOnce a `keyspace` is selected, the system invoke `pullJobs`\r\nby range of `500` items.\r\n\r\n`processJobs` is then executed to process\r\nall selected jobs in parallel with a limit according to `jobQueueLength`,\r\n which defaults to `50`.\r\n\r\nWhen `currentJobs` is empty, the systems `pullJobs` again,\r\nand also tries to `doSomeCleanUp` to get a new `keyspace` id.\r\n\r\nThe system tries not to stuck on particular `keyspaces`,\r\nand call `updateCurrentBlockKey` to distribute new `keyspace` to browse.\r\n\r\n\r\n## need\r\n\r\n##### optimizations\r\n\r\nThey are rooms too optimize.\r\nNoticeable example is the redis reads/writes.\r\n\r\n##### improve cookie support\r\n\r\nNeeds cookie support improvement.\r\n\r\n## see also\r\n\r\n- [http-flow-visualizer](https://github.com/maboiteaspam/http-flow-visualizer)\r\n- [http-replayer](https://github.com/maboiteaspam/http-replayer)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}